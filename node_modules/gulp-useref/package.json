{
  "name": "gulp-useref",
  "version": "3.1.0",
  "description": "Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "event-stream": "^3.3.1",
    "glob": "^7.0.3",
    "gulp-concat": "^2.5.2",
    "gulp-if": "^2.0.0",
    "gulp-util": "^3.0.1",
    "is-relative-url": "1.0.0",
    "through2": "^2.0.1",
    "useref": "^1.2.0",
    "vinyl-fs": "^2.2.1"
  },
  "devDependencies": {
    "coveralls": "^2.11.4",
    "gulp": "^3.9.0",
    "gulp-eslint": "^2.0.0",
    "gulp-mocha": "^2.0.0",
    "gulp-rename": "^1.2.2",
    "mocha": "*",
    "mock-gulp-dest": "^0.1.1",
    "nyc": "^6.4.0",
    "should": "*"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha",
    "lint": "gulp lint",
    "coverage": "nyc npm test && nyc report",
    "coveralls": "nyc npm test && nyc report --reporter=text-lcov | coveralls"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jonkemp/gulp-useref"
  },
  "keywords": [
    "gulpplugin",
    "html",
    "scripts",
    "css",
    "optimize",
    "concat"
  ],
  "author": {
    "name": "Jonathan Kemp",
    "email": "kempdogg@gmail.com",
    "url": "http://jonkemp.com/"
  },
  "license": "MIT",
  "readme": "# [gulp](https://github.com/gulpjs/gulp)-useref [![Build Status](https://travis-ci.org/jonkemp/gulp-useref.svg?branch=master)](https://travis-ci.org/jonkemp/gulp-useref) [![Coverage Status](https://coveralls.io/repos/jonkemp/gulp-useref/badge.svg?branch=master&service=github)](https://coveralls.io/github/jonkemp/gulp-useref?branch=master)\n\n[![NPM](https://nodei.co/npm/gulp-useref.png?downloads=true)](https://nodei.co/npm/gulp-useref/)\n\n> Parse build blocks in HTML files to replace references to non-optimized scripts or stylesheets with [useref](https://github.com/jonkemp/useref)\n\nInspired by the grunt plugin [grunt-useref](https://github.com/pajtai/grunt-useref). It can handle file concatenation but not minification. Files are then passed down the stream. For minification of assets or other modifications, use [gulp-if](https://github.com/robrich/gulp-if) to conditionally handle specific types of assets.\n\n\n## What's new in 3.0?\n\nChanges under the hood have made the code more efficient and simplified the API. Since the API has changed, please observe the usage examples below.\n\nIf you get errors like\n\n    TypeError: useref.assets is not a function\n\nor\n\n    TypeError: $.useref.assets is not a function\n\nplease read the Migration Notes below.\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/gulp-useref)\n\n```\nnpm install --save-dev gulp-useref\n```\n\n\n## Usage\n\nThe following example will parse the build blocks in the HTML, replace them and pass those files through. Assets inside the build blocks will be concatenated and passed through in a stream as well.\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref');\n\ngulp.task('default', function () {\n    return gulp.src('app/*.html')\n        .pipe(useref())\n        .pipe(gulp.dest('dist'));\n});\n```\n\nWith options:\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref');\n\ngulp.task('default', function () {\n    return gulp.src('app/*.html')\n        .pipe(useref({ searchPath: '.tmp' }))\n        .pipe(gulp.dest('dist'));\n});\n```\n\nIf you want to minify your assets or perform some other modification, you can use [gulp-if](https://github.com/robrich/gulp-if) to conditionally handle specific types of assets.\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref'),\n    gulpif = require('gulp-if'),\n    uglify = require('gulp-uglify'),\n    minifyCss = require('gulp-minify-css');\n\ngulp.task('html', function () {\n    return gulp.src('app/*.html')\n        .pipe(useref())\n        .pipe(gulpif('*.js', uglify()))\n        .pipe(gulpif('*.css', minifyCss()))\n        .pipe(gulp.dest('dist'));\n});\n```\n\nBlocks are expressed as:\n\n```html\n<!-- build:<type>(alternate search path) <path> <parameters> -->\n... HTML Markup, list of script / link tags.\n<!-- endbuild -->\n```\n\n- **type**: either `js`, `css` or `remove`; `remove` will remove the build block entirely without generating a file\n- **alternate search path**: (optional) By default the input files are relative to the treated file. Alternate search path allows one to change that\n- **path**: the file path of the optimized file, the target output\n- **parameters**: extra parameters that should be added to the tag\n\nAn example of this in completed form can be seen below:\n\n```html\n<html>\n<head>\n    <!-- build:css css/combined.css -->\n    <link href=\"css/one.css\" rel=\"stylesheet\">\n    <link href=\"css/two.css\" rel=\"stylesheet\">\n    <!-- endbuild -->\n</head>\n<body>\n    <!-- build:js scripts/combined.js -->\n    <script type=\"text/javascript\" src=\"scripts/one.js\"></script>\n    <script type=\"text/javascript\" src=\"scripts/two.js\"></script>\n    <!-- endbuild -->\n</body>\n</html>\n```\n\nThe resulting HTML would be:\n\n```html\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"css/combined.css\"/>\n</head>\n<body>\n    <script src=\"scripts/combined.js\"></script>\n</body>\n</html>\n```\n\nSee [useref](https://github.com/jonkemp/useref) for more information.\n\n## API\n\n### useref(options [, transformStream1 [, transformStream2 [, ... ]]])\n\nReturns a stream with the asset replaced resulting HTML files as well as the concatenated asset files from the build blocks inside the HTML. Supports all options from [useref](https://github.com/jonkemp/useref).\n\n### Transform Streams\n\nType: `Stream`  \nDefault: `none`\n\nTransform assets before concat. For example, to integrate source maps:\n\n```js\nvar gulp = require('gulp'),\n    sourcemaps = require('gulp-sourcemaps'),\n    useref = require('gulp-useref'),\n    lazypipe = require('lazypipe');\n\ngulp.task('default', function () {\n    return gulp.src('index.html')\n        .pipe(useref({}, lazypipe().pipe(sourcemaps.init, { loadMaps: true })))\n        .pipe(sourcemaps.write('maps'))\n        .pipe(gulp.dest('dist'));\n});\n```\n\n### Options\n\n#### options.searchPath\n\nType: `String` or `Array`  \nDefault: `none`  \n\nSpecify the location to search for asset files, relative to the current working directory. Can be a string or array of strings.\n\n#### options.base\n\nType: `String`  \nDefault: `process.cwd()`  \n\nSpecify the output folder relative to the cwd.\n\n#### options.noAssets\n\nType: `Boolean`  \nDefault: `false`  \n\nSkip assets and only process the HTML files.\n\n#### options.noconcat\n\nType: `Boolean`  \nDefault: `false`  \n\nSkip concatenation and add all assets to the stream instead.\n\n#### options.newLine\n\nType: `String`  \nDefault: `none`\n\nAdd a string that should separate the concatenated files.\n\n#### options.additionalStreams\n\nType: `Array<Stream>`  \nDefault: `none`\n\nUse additional streams as sources of assets. Useful for combining gulp-useref with preprocessing tools. For example, to use with TypeScript:\n\n```javascript\nvar ts = require('gulp-typescript');\n\n// create stream of virtual files\nvar tsStream = gulp.src('src/**/*.ts')\n        .pipe(ts());\n\ngulp.task('default', function () {\n    // use gulp-useref normally\n    return gulp.src('src/index.html')\n        .pipe(useref({ additionalStreams: [tsStream] }))\n        .pipe(gulp.dest('dist'));\n});\n```\n\n#### options.transformPath\n\nType: `Function`  \nDefault: `none`\n\nAdd a transformPath function in case the path needs to be modified before search happens.\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref');\n\ngulp.task('default', function () {\n    return gulp.src('app/*.html')\n        .pipe(useref({\n            transformPath: function(filePath) {\n                return filePath.replace('/rootpath','')\n            }\n        }))\n        .pipe(gulp.dest('dist'));\n});\n```\n\n## Migration from v2 API\n\nIf you upgrade gulp-useref from v2 without changing your gulpfile,\nyou will get errors like this:\n\n    TypeError: $.useref.assets is not a function\n\nor\n\n    TypeError: useref.assets is not a function\n\nFor a simple configuration, you can replace this V2 code:\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref');\n\ngulp.task('default', function () {\n    var assets = useref.assets();\n\n    return gulp.src('app/*.html')\n        .pipe(assets)\n        .pipe(assets.restore())\n        .pipe(useref())\n        .pipe(gulp.dest('dist'));\n});\n```\n\nwith this V3 code:\n\n```js\nvar gulp = require('gulp'),\n    useref = require('gulp-useref');\n\ngulp.task('default', function () {\n    return gulp.src('app/*.html')\n        .pipe(useref())\n        .pipe(gulp.dest('dist'));\n});\n```\n\nIf you were previously using useref in a multi-stage pipe,\nyou may need to rewrite the pipe, since the simplified V3 API\nmay not allow for its previous usage.\n\nIf the gulpfile you are using came from a generator, (for example,\nin JohnPapa's excellent \"opinionated\" HotTowel generator), it may\nbe more practical to go back to that generator project to see\nwhether they have upgraded to the V3 gulp-useref API, rather than\ntrying to understand their pipe.\n\n\n## Notes\n\n* [ClosureCompiler.js](https://github.com/dcodeIO/ClosureCompiler.js) doesn't support Buffers, which means if you want to use [gulp-closure-compiler](https://github.com/sindresorhus/gulp-closure-compiler) you'll have to first write out the `combined.js` to disk. See [this](https://github.com/dcodeIO/ClosureCompiler.js/issues/11) for more information.\n\n\n## Contributing\n\nSee the [CONTRIBUTING Guidelines](https://github.com/jonkemp/gulp-useref/blob/master/CONTRIBUTING.md)\n\n\n## License\n\nMIT Â© [Jonathan Kemp](http://jonkemp.com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jonkemp/gulp-useref/issues"
  },
  "_id": "gulp-useref@3.1.0",
  "_from": "gulp-useref@^3.0.0"
}
